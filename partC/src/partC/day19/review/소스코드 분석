시나리오 : 반려동물 분양 커뮤니티

--실행화면--
[[반려동물 목록을 보여드리겠습니다.]]     // Animal 클래스(추상클래스)를 배열 사용하여 구현합니다.

브라운 강아지는 멍멍하고 짖습니다.😽 		// Puppy 클래스 sound() 메소드
그레이 고양이는 야옹하고 소리를 냅니다.		// Cat 클래스 sound() 메소드
흰색 토끼는 조용합니다.			// Rabbit 클래스 sound() 메소드

//Member 클래스를 생성합니다.  //회원의 분양 자격을 체크합니다.
//    ㄴ adopt 메소드 인자 Animal 타입을 받습니다.
모모 회원님은 강아지 분양 자격이 안됩니다. 😓   또는
모모 회원님 강아지 분양 가능합니다. 😃 



-----------------------------------------------------------------------------------
--소스 코드 분석하기--
Animal = 부모 클래스
public abstract class Animal {
## Animal 클래스 = 추상 클래스

static final String TYPE ="동물";
## Animal 클래스에 변하지 않는 상수(final) 문자열 타입 "동물"

private String color;	
private String name;  
## Animal 클래스에 공통적인 특성을 필드값 color(색상)와 name(이름)

public Animal() {
		System.out.println("새로운 반려동물 가족이 생겼습니다.");
	}
## Animal 클래스 생성자 > 출력하고 싶은 문자열을 출력문으로 작성

public Animal(String color) {
		this();		//기본생성자 메소드 호출
		this.color=color;
	}
## Animal 클래스 커스텀 생성자 > this(); 는 Animal 클래스에 생성자에 있는 출력문을 출력 하고싶고 
color도 인자로 넣어서 출력하고 싶어서 사용

public abstract void sound();
## Animal 클래스 공통적인 기능인 추상 메소드 생성 (sound = 소리)

public abstract String getType();
## Animal 클래스 공통적인 기능인 추상 메소드 getter 생성(TYPE = "동물")

public String getColor() {
		return this.color;
	}
	
public void setColor(String color) {
		this.color = color;
	}
## Animal 클래스 필드인 color 가 private 이기 때문에 getter, setter 를 사용
>>> 필드가 public 이면 getter,setter 사용 안해도됨. 필드가 private 일때만 getter,setter 를 사용할수 있음.(읽고 쓰기)
-----------------------------------------------------------------------------------
Cat = Animal 부모클래스의 자식 클래스
public class Cat extends Animal {
## 'extends Animal' 코드로 Animal 클래스를 상속받음. 

static final String TYPE ="고양이";
## Animal 클래스에 변하지 않는 상수(final) 문자열 타입이랑 동일하지만 아무 상관없이 
일반 필드처럼 사용.

public String getType() {
		return "TYPE";
	}
## 상수 TYPE 에 동물 타입을 "고양이"로 줬으며 Main에서 출력을 하기 위해 getType()으로 getter를 
선언해줬음. >>> getter = 읽기

@Override
	public void sound() {
		System.out.println(super.getColor() +" 고양이는 야옹 😽 하고 소리를 냅니다.");
## Animal에 선언된 추상메소드 sound()를 오버라이드로 재정의를 하여 super.getColor() 는 
고양이의 색상을 읽어주기 위해 쓰인 코드.
-----------------------------------------------------------------------------------
Puppy = Animal 부모클래스의 자식 클래스
public class Puppy extends Animal {
## 'extends Animal' 코드로 Animal 클래스를 상속받음. 

static final String TYPE ="강아지";
## Animal 클래스에 변하지 않는 상수(final) 문자열 타입이랑 동일하지만 아무 상관없이 
일반 필드처럼 사용.

public Puppy() {}
## Puppy 클래스의 디폴트 생성자. 생성자가 아무것도 없으면 컴파일러가 알아서 보이지 않게 만들어 주지만 커스텀 생성자도 쓰면서 기본 생성자도 쓰고싶어서 만든 디폴트 생성자.

public Puppy(String color) {
		super(color);
		//this.setColor(color);
	}
## Puppy 클래스의 커스텀 생성자 선언.//this.setColor(color); 

public String getType() {
		return "TYPE";
	}
## 상수 TYPE 에 동물 타입을 "강아지"로 줬으며 Main에서 출력을 하기 위해 getType()으로 getter를 
선언해줬음. >>> getter = 읽기

@Override
	public void sound() {
		System.out.println(super.getColor() +" 강아지는 멍멍 🐶🐶하고 짖습니다. ");
## Animal에 선언된 추상메소드 sound()를 오버라이드로 재정의를 하여 super.getColor() 는 
강아지의 색상을 읽어주기 위해 쓰인 코드.
-----------------------------------------------------------------------------------
Rabbit = Animal 부모클래스의 자식 클래스
public class Rabbit extends Animal {
## 'extends Animal' 코드로 Animal 클래스를 상속받음. 

static final String TYPE ="토끼";
## Animal 클래스에 변하지 않는 상수(final) 문자열 타입이랑 동일하지만 아무 상관없이 
일반 필드처럼 사용.

public String getType() {
	return "TYPE";
	}
## 상수 TYPE 에 동물 타입을 "토끼"로 줬으며 Main에서 출력을 하기 위해 getType()으로 getter를 
선언해줬음. >>> getter = 읽기

@Override
	public void sound() {
		System.out.println(super.getColor() + "토끼는 🐰🐰조용합니다.");
## Animal에 선언된 추상메소드 sound()를 오버라이드로 재정의를 하여 super.getColor() 는 
토끼의 색상을 읽어주기 위해 쓰인 코드.
-----------------------------------------------------------------------------------
Member 클래스 = 회원 클래스 (완전 따로인 클래스)
public class Member {
## Animal 클래스랑은 서로 다른 정보를 가지고 있는 Member 클래스

private String name;
private int age;
## Member 클래스에 회원 이름(name),나이(age) 필드 선언

public Member(String name,int age) {
		this.name =name;
		this.age=age;
	}
## Member 클래스의 커스텀 생성자

	boolean isAdopt(Animal animal) { //메소드의 인자가 Animal 타입. 인자로 받은 동물이 분양 자격있는지 체크
		
// 요구사항 : 강아지는 15세이상, 고양이는 18세이상, 토끼는 13세 이상 분양받을 수 있습니다.그외 동물은 20세 이상
// Animal 타입이 실제 객체가 무엇인지는 ? 아직 모름. 실행 시점에서 알수 있습니다.
		if(animal instanceof Puppy && age >=15)   // >= : 크거나 같으면
	//instanceof 연산 : 실제 객체 타입을 검사. 클래스 상속객체들에게 사용하는 연산.
			return true;
		else if(animal instanceof Cat && age >=18)
			return true;
		else if(animal instanceof Rabbit && age >=13)
			return true;
		else if(animal instanceof Animal && age >=20)
			return true;
		else 
			return false;
	}
## isAdopt 주석처리 해놓은 요구사항에 맞게 조건문 생성

public String getName() {
		return name;
	}
public int getAge() {
		return age;
	}
## Member 클래스에 생성한 필드 name과 age의 getter 생성




















