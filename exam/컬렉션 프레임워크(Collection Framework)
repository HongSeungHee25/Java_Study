<컬렉션 프레임워크(Collection Framework)>
: 컬렉션 프레임워크(Collection Framework)는 java에서 제공하는 데이터의 그룹을 다루기 위한 인터페이스와 클래스들의 모음입니다.
컬렉션 프레임워크는 데이터의 저장,검색,조작 등 다양한 기능을 제공하여 데이터를 효율적으로 관리할 수 있도록 도와줍니다.컬렉션 프레임워크의 주요한
인터페이스로는 List(리스트),Set(집합),Map(맵),Queue(큐),Stack(스택)등이 있습니다.

	1. List(리스트) : 순서가 있는 데이터의 집합을 나타내는 인터페이스입니다. 중복된 데이터를 허용하고, 데이터의 삽입, 삭제, 검색 등을 지원합니다.
	대표적인 구현 클래스로는 ArrayList, LinkedList 등이 있습니다.
	2. Set(집합) : 순서가 없는 데이터의 집합을 나타내는 인터페이스입니다. 중복된 데이터를 허용하지 않으며, 데이터의 삽입, 삭제, 검색 등을 지원합니다.
	대표적인 구현 클래스로는 HashSet, LinkedHashSet, TreeSet 등이 있습니다.
	3.Map(맵) : Key-Value 쌍으로 데이터를 저장하는 인터페이스입니다. Key는 중복될 수 없으며, Value는 중복이 가능합니다. Key를 통해 Value를 
	검색하고, 데이터의 삽입, 삭제, 검색 등을 지원합니다. 대표적인 구현 클래스로는 HashMap, LinkedHashMap, TreeMap 등이 있습니다.
	4. Queue(큐) : 선입선출(FIFO) 원칙에 따라 데이터를 저장하는 인터페이스입니다. 데이터의 삽인은 한쪽 끝(rear)에서, 삭제는 다른 한쪽 끝(front)에서
	이루어집니다. 대표적인 구현 클래스로는 LinkedList, PriorityQueue 등이 있습니다.
	5. Stack(스택) : 후입선출(LIFO) 원칙에 따라 데이터를 저장하는 인터페이스입니다. 데이터의 삽입과 삭제가 같은 쪽에서 이루어집니다. 대표적인 구현
	클래스로는 Vector, Stack 등이 있습니다.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	컬렉션 프레임워크(Collection Framework)에서 사용되는 '<>'기호는 제네릭(Generic)을 나타내며, 
	해당 컬렉션에 저장될 요소의 타입을 지정하는 역할을 합니다.

	🔎 제네릭(Generic)이란❓
	Java에서 컴파일 시 타입 안정성을 제공하기 위한 기능입니다. 제네릭은 클래스, 인터페이스, 메서드 등에서 사용할 수 있습니다.
	1. 타입 안정성(Type Safety) : 제네릭을 사용하면 컴파일 시점에 타입 체크가 이루어져 타입 불일치로 인한 오류를 사전에 방지할 수 있습니다.
	컴파일러는 제네릭 타입에 대한 경고나 오류를 표시하여 프로그래머가 잘못된 타입을 사용하는 것을 방지합니다.
	2. 타입 변환 감소 : 제네릭을 사용하면 명시적인 타입 변환을 줄일 수 있습니다. 제네릭을 사용하지 않은 경우에는 Object 타입으로 요소를 
	처리한 후에 형변환을 해야하는 번거로움이 있지만, 제네릭을 사용하면 해당 타입으로 자동 형변환이 이루어집니다.
	3. 코드의 재사용성 : 제네릭은 타입에 상관없이 동일한 로직을 사용할 수 있도록 해줍니다. 제네릭 클래스나 메서드를 작성하면 다양한 타입에서 
	재사용할 수 있습니다.
	
	제네릭은 '<>'기호를 사용하여 선언하며, 일반적으로 '<E>','<T>','<K,V>'와 같은 형태로 사용됩니다. 이러한 타입 매개변수(Type Parameter)는
	실제 타입으로 대체되어 사용됩니다. 제네릭은 클래스, 인터페이스, 메서드에서 사용할 수 있으며, 사용 방법은 각각의 컨텍스트에 맞게 적용됩니다.
	클래스나 인터페이스의 경우 타입 매개변수를 클래스나 인터페이스 뒤에 추가하여 선언하고, 메서드의 경우 메서드 반환 타입 앞에 타입 매개변수를 추가하여 
	사용합니다.
	
	예를들어,'ArrayList<E>'에서 E는 실제로 사용될 타입을 의미하며,'ArrayList<String>'은 문자열을 저장하는 ArrayList를 생성하는 것을
	의미합니다.
	
	'<>'안에 들어가는 것은 Java의 참조 타입(Reference Type)입니다. 
	1. List<E> : E는 리스트에 저장될 요소의 타입을 나타냅니다. 예를 들어, 'List<String>'은 문자열을 저장하는 리스트를 나타냅니다.
	2. Set<E> : E는 집합에 저장될 요소의 타입을 나타냅니다. 예를 들어, 'Set<Integer>'은 정수를 저장하는 집합을 나타냅니다.
	3. Map<K, V> : K는 맵의 키(Key)의 타입을,V는 맵의 값(Value)의 타입을 나타냅니다. 예를 들어, 'Map<String, Integer>'은 
	문자열을 키로 사용하고 정수를 값으로 사용하는 맵을 나타냅니다.
	4. Queue<E> : E는 큐에 저장될 요소의 타입을 나타냅니다. 예를 들어, 'Queue<Customer>'는 Customer 객체를 저장하는 큐를 나타냅니다.
	5. Stack<E> : E는 스택에 저장될 요소의 타입을 나타냅니다. 예를 들어, 'Stack<Character>'는 문자(Character)를 저장하는 스택을
	나타냅니다.
	
	
	
	
	
	
	
	
	
	