<Iterator>
: Iterator는 자바에서 컬렉션(Collection)요소를 순차적으로 접근하고, 해당 요소를 수정 또는 삭제할 수 있는 인터페이스입니다.
Iterator를 사용하여 컬렉션의 요소에 접근하면서 컬렉션을 안전하게 반복(itetate)할 수 있습니다.

	<Iterator 인터페이스의 주요 메서드>
	● 'boolean hasNaxt()' : 다음 요소가 있는지 확인합니다. 다음 요소가 있으면 true를 반환하고, 없으면 false를 반환합니다.
	● 'E next()' : 다음 요소를 반환합니다. 커서를 다음 위치로 이동합니다.
	● 'void remove()' : 현재 요소를 삭제합니다. 이 메서드를 호출하기 전에 반드시 'next()'메서드로 요소를 가져와야 합니다.
	
	<Iterator 사용하여 컬렉션 반복 절차>
	1. 컬렉션에서 Iterator 객체를 얻습니다. 이를 통해 컬렉션의 요소에 접근할 수 있습니다. 일반적으로 'iterator()'메서드를 사용하여
	Iterator를 얻습니다.
	2. 'hasNext()'메서드를 사용하여 다음 요소의 존재 여부를 확인합니다. 다음 요소가 있다면 반복을 계속하고, 없다면 반복을 종료합니다.
	3. 'next()'메서드를 사용하여 다음 요소를 가져옵니다. 가져온 요소를 이용하여 원하는 작업을 수행합니다.
	4. 필요한 경우 'remove()'메서드를 사용하여 현재 요소를 삭제할 수 있습니다. 이는 선택 사항이며, 삭제를 지원하는 Iterator에서만 
	사용될 수 있습니다.
	5. 'hasNext()'메서드가 'false'를 반환할 때까지 2~4단계를 반복합니다.
	
	Iterator는 컬렉션의 내부 구조에 독립적으로 동작하기 때문에 컬렉션의 종류에 상관없이 일관된 방식으로 요소를 순회할 수 있습니다. Iterator를 
	사용하면 컬렉션을 수정하거나 삭제할 수도 있습니다. 또한, Iterator는 읽기 전용이므로 요소를 순회하면서 컬렉션을 안전하게 수정할수 있습니다.