<Map>
: Java에서 Map은 키-값 쌍으로 이루어진 데이터를 저장하는 컬렉션입니다. Map은 키(key)와 값(value)으로 이루어진 항목들을 관리하며, 각각의 키는
고유해야 합니다. 키를 통해 값을 검색하고 저장하고자 할 때 주로 사용됩니다. Map은 다양한 구현체가 있으며, 각각의 구현체는 서로 다른 특징과 동작 방식을
가지고 있습니다. 대표적인 Map 구현체로는 HashMap, LinkedHashMap, TreeMap 등이 있습니다.

● 'HashMap' : 가장 일반적으로 사용되는 Map 구현체입니다. 해시 테이블을 기반으로 키-값 쌍을 저장하며, 순서를 보장하지 않습니다.
키와 값은 null값을 허용하며, 동기화를 지원하지 않습니다. 보통 가장 빠른 검색과 삽입을 제공합니다.
● 'LinkedHashMap' : HashMap의 기능을 상속받으면서 순서를 유지합니다. 순서는 삽입 순서 또는 엑세스 순서에 따라 결정될 수 있습니다. 
일반적인 HashMap과 비슷한 성능을 가지지만 순서를 유지하기 위해 약간의 오버헤드가 발생할 수 있습니다.
● 'TreeMap' : 이진 검색 트리를 기반으로 키-값 쌍을 저장합니다. 키들은 기본적으로 정렬된 상태를 유지합니다. 정렬된 키들을 기반으로 검색과
범위 검색이 가능하며, Iterator를 통해 키의 순서대로 순회할 수 있습니다. TreeMap은 성능 면에서는 비교적 느리지만 정렬된 순서를 필요로 할 때 
유용합니다.

Map은 데이터의 검색과 삽입이 빠르며, 특히 키(key)를 기반으로 값을 빠르게 찾을 수 있습니다. 일반적으로는 데이터베이스의 테이블 구조와 유사하게 
사용될 수 있으며, 다양한 문제 해결에 유용하게 활용됩니다.
	● 'put(key, value)' : 키와 값을 매핑하여 Map에 추가합니다.
	● 'get(key)' : 주어진 키에 해당하는 값을 반환합니다.
	● 'containsKey(key)' : 주어진 키가 Map에 포함되어 있는지 확인합니다.
	● 'remove(key)' : 주어진 키에 해당하는 항목을 Map에서 제거합니다.
	● 'keySet()' : Map의 모든 키를 Set 형태로 반환합니다.
	● 'values()' : Map의 모든 값들을 Collection 형태로 반환합니다.

Map은 데이터를 쌍으로 관리하는데 유용하며, 특히 key를 통해 값을 빠르게 검색해야 하는 경우에 많이 사용됩니다. 
다양한 자바 라이브러리와 프레임워크에서도 Map을 활용하여 데이터를 구조화하고 처리하는데 활용되고 있습니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Map : 
	● Map은 키-값 쌍으로 이루어진 데이터를 저장하는 컬렉션입니다.
	● 각 키는 고유해야 하며, 키를 통해 값을 검색하고 저장합니다.
	● Map은 키와 값의 관계를 표현하고자 할 때 사용합니다.
	
Set :
	● Set은 중복되지 않는 고유한 요소들을 저장하는 컬렉션입니다.
	● 요소들의 순서를 보장하지 않으며, 순서에 의존하는 작업에는 적합하지 않습니다.
	● Set은 주로 고유한 요소들을 저장하고 관리하는 데 사용됩니다.