<ListIterator>
: 'ListIterator'는 Java의 'List'인터페이스에서 파생된 인터페이스입니다. 'ListIterator'는 'List' 컬렉션을 순차적으로 반복하면서 
요소에 접근하고, 요소에 추가, 수정, 삭제 등의 작업을 수행할 수 있는 기능을 제공합니다. 

	<ListIterator의 주요 특징과 사용법>
	1. 양방향 반복(Bidirectional Iteration) : 'ListIterator'는 단방향이 아닌 양방향으로 반복할수 있습니다. 이는 이전 요소로 
	이동하거나 다음 요소로 이동할 수 있다는 것을 의미합니다.
	2. 요소의 추가, 수정, 삭제 : 'ListIterator'는 현재 위치에서 요소를 추가하거나 수정할 수 있습니다. 또한, 이전 요소 또는 다음 요소를 
	삭제할 수도 있습니다.
	3. 인덱스 접근 : 'ListIterator'는 현재 위치를 인덱스로 확인할 수 있습니다. 'previousIndex()'메소드를 사용하여 현재 위치의 
	이전 인덱스를, 'nextIndex()'메소드를 사용하여 현재 위치의 다음 인덱스를 확인할 수 있습니다.
	4. 단일 스레드 사용 : 'ListIterator'는 단일 스레드 환경에서 사용되어야 합니다. 멀티 스레드 환경에서 동시에 수정되는 경우 예기치 않은
	결과가 발생할 수 있습니다.
	
	<ListIterator의 주요 메소드>
	● 'hasNext()' : 다음 요소의 존재 여부를 확인합니다.
	● 'next()' : 다음 요소를 반환하고, 커서를 다음 위치로 이동시킵니다.
	● 'hasPrevious()' : 이전 요소의 존재 여부를 확인합니다.
	● 'previous()' : 이전 요소를 반환하고, 커서를 이전 위치로 이동시킵니다.
	● 'add(E element)' : 현재 위치에 요소를 추가합니다.
	● 'set(E element)' : 현재 위치의 요소를 수정합니다.
	● 'remove()' : 현재 위치의 요소를 삭제합니다.
	