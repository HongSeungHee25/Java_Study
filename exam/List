<List>
● List 는 Java의 java.util 패키지에 있는 인터페이스입니다.
● 중복을 허용하는 정렬된 요소 모음을 나타냅니다.
● List는 일반적으로 특정 순서로 요소를 저장하고 엑세서해야 할 때 사용됩니다.
● List 인터페이스의 일부 공통 구현은 ArratList 및 LinkedList 입니다.
● List는 요소를 추가, 제거, 검색 및 조작하는 다양한 방법을 제공합니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<배열(Arrays)>
● 배열은 동일한 유형의 요소를 저장하는 고정 크기 데이터 구조입니다.
● 인덱스 기반 표기법을 사용하여 요소에 대한 직접 엑세스를 제공합니다.
● Java의 배열은 인덱스가 입니다. 즉, 첫 번째 요소가 인덱스 0에 있음을 의미합니다.
● 배열의 크기는 생성 시 정의되며 동적으로 변경할 수 없습니다.
● 배열은 기본 유형(예 : int[], char[])또는 참조 유형(예 : String[])일 수 있습니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<ArrayList>
● ArrayList는 List 인터페이스의 동적 구현입니다.
● 요소가 추가됨에 따라 자동으로 커지는 배열로 지원됩니다.
● ArrayList는 인덱스를 사용하여 요소에 대한 빠른 임의 엑세스를 허용합니다.
● ArrayList의 모든 위치에서 요소를 추가하거나 제거할 수 있습니다.
● ArrayList는 동적 크기 조정을 지원하므로 필요에 따라 크기를 늘리거나 줄일 수 있습니다.
● ArrayList를 사용하려면 java.util.ArrayList를 가져와서 new 키워드를 사용하여 인스턴스를 생성해야 합니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<LinkedList>
● LinkedList는 List 인터페이스의 또 다른 구현입니다.
● 이중 연결 리스트 데이터 구조를 기반으로 합니다.
● LinkedList는 목록의 양쪽 끝(시작과 끝)에서 요소를 효율적으로 삽입하고 제거합니다.
● LinkedList의 임의 엑세스는 처음 또는 끝에서 목록을 탐색해야 하기 때문에 ArrayList에 비해 속도가 느립니다.
● LinkedList는 목록의 처음이나 끝에서 요소를 자주 추가하거나 제거해야 하는 경우에 적합합니다.
● LinkedList를 사용하려면 java.util.LinkedList를 가져와서 new 키워드를 사용하여 인스턴스를 생성해야 합니다.

