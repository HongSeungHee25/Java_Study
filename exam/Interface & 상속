<Interface> & <상속> 차이점
1. 목적 :
	● 인터페이스 : 인터페이스는 클래스가 가져야 하는 특정한 동작을 정의하는 역할을 합니다. 인터페이스는 클래스가 어떤 메소드를 가져야 하는지를 
	선언하고, 해당 메소드를 구현하는 책임은 클래스에게 맡깁니다. 인터페이스는 클래스 간의 계약(Contract) 역할을 합니다.
	● 상속 : 상속은 클래스 간의 계층 구조를 형성하여 코드와 데이터를 재사용하는 것을 목적으로 합니다. 부모 클래스(상위 클래스)의 코드와 데이터를
	자식 클래스(하위 클래스)가 상속받아 사용할 수 있습니다.
2. 다중 상속 : 
	● 인터페이스 : 인터페이스는 다중 상속을 지원합니다. 클래스가 여러 개의 인터페이스를 구현할 수 있으며, 이를 통해 다중 상속과 유사한 효과를 
	얻을 수 있습니다.
	● 상속 : 자바에서는 단일 상속만을 지원합니다. 클래스는 하나의 부모 클래스만을 상속받을 수 있습니다.
3. 구현 : 
	● 인터페이스 : 인터페이스는 추상 메소드의 집합으로 구성되며, 메소드의 시그니처만을 정의하고 구현 내용은 포함되지 않습니다. 클래스가 인터페이스를 
	구현할 때는 인터페이스에서 선언한 모든 메소드를 구현해야 합니다.
	● 상속 : 상속은 클래스 간의 계층 구조를 형성합니다. 부모 클래스의 필드와 메소드를 자식 클래스에서 상속받아 사용할 수 있으며, 필요한 경우 메소드를
	재정의(오버라이딩)하여 자식 클래스의 동작을 변경할 수 있습니다.
4. 관계 : 
	● 인터페이스 : 인터페이스는 클래스와는 독립적으로 존재하며, 클래스가 인터페이스를 구현하여 사용합니다. 클래스는 여러 개의 인터페이스를 구현할 수 
	있으며, 클래스와 인터페이스 간에서 "구현 관계"가 형성됩니다.
	● 상속 : 상속은 클래스 간에 "상속 관계"를 형성합니다. 자식 클래스는 부모 클래스의 특성을 상속받으며, 부모 클래스와 자식 클래스 간에는 
	"상속 관계"가 형성됩니다.	

>>>>>요약<<<<<
▶ 인터페이스는 클래스가 가져야 하는 특정한 동작을 정의하는 역할을 하고, 다중 상속을 지원하며 구현은 클래스에게 맡깁니다.
▶ 상속은 클래스 간의 계층 구조를 형성하여 코드와 데이터를 재사용하여, 단일 상속만을 지원합니다. 상속은 클래스와 클래스 간의 관계를 형성합니다.

<Interface>
Java에서 인터페이스는 추상화된 클래스로, 메소드의 시그니처(메소드의 이름, 매개변수, 반환 타입)를 정의하는 역할을 합니다.
인터페이스는 클래스가 가져야 하는 특정한 동작으 정의하고, 클래스가 해당 인터페이스를 구현할 때는 인터페이스에서 정의한 모든 메소드를
구현해야합니다. 이를 통해 다중 상속과 유사한 효과를 얻을 수 있으며, 코드의 유연성과 확장성을 높일 수 있습니다.
인터페이스는 클래스와의 강한 결합을 피할 수 있으며, 다형성과 코드 재사용성을 높일 수 있는 중요한 개념입니다. 인터페이스를 사용하여 
다양한 클래스가 동일한 동작을 수행할 수 있도록 설계할 수 있습니다.