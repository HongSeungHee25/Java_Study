<Set>
: java에서 Set은 컬렉션 프레임워크의 인터페이스 중 하나로, 중복된 요소를 허용하지 않고, 순서를 보장하지 않는 컬렉션입니다.
Set은 주로 고유한 요소들을 저장하고 관리하는 데 사용됩니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<Set 인터페이스의 특징과 기능>
1. 중복 요소 제거 : Set은 중복된 요소를 허용하지 않습니다. 동일한 요소를 중복해서 추가하려고 할 경우, 추가 작업은 무시됩니다.
2. 순서 보장하지 않음 : Set은 요소들의 순서를 보장하지 않습니다. 요소를 저장한 순서대로 접근할 수 없으며, 순서에 의존하는 작업에는 
적합하지 않습니다.
3. 고유한 요소 저장 : Set은 고유한 요소들을 저장하는데 사용됩니다. 중복된 요소를 허용하지 않으므로, Set에는 동일한 요소가 한 번만 저장됩니다.
4. Set 인터페이스 구현체 : 자바에서 Set 인터페이스는 다양한 구현체를 가지고 있습니다. 대표적으로 HashSet, LinkedHashSet, TreeSet등이 
있습니다. 이들 구현체는 Set 인터페이스의 메서드를 구현하여 다양한 방식으로 Set을 구현합니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<HashSet>
● HashSet은 해시 테이블을 기반으로 한 Set 구현체입니다.
● 순서를 보장하지 않으며, 중복된 요소를 허용하지 않습니다.
● 요소를 추가, 삭제, 검색하는데 O(1)의 시간 복잡도를 가집니다.
● 일반적으로 빠른 성능이 요구되는 경우에 사용됩니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<LinkedHashSet>
● LinkedHashSet은 해시 테이블과 LinkedList를 결합한 Set 구현체입니다.
● 요소의 순서를 보장하며, 중복된 요소를 허용하지 않습니다.
● 요소의 추가, 삭제, 검색에는 HashSet과 유사한 성능을 가지지만, 순회할 때는 추가된 순서대로 요소를 반환합니다.
● 순서가 중요하고 중복을 허용하지 않아야 할 때 사용됩니다.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
<TreeSet>
● TreeSet은 이진 검색 트리를 기반으로 한 Set 구현체입니다.
● 요소를 자동으로 정렬하여 저장하며, 중복된 요소를 허용하지 않습니다. 
● 요소의 추가, 삭제, 검색에는 O(log N)의 시간 복잡도를 가집니다.
● 요소들이 정렬되어 있어야 하고, 중복을 허용하지 않아야 할 때 사용됩니다.